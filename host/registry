#!/bin/bash
set -euo pipefail

# -----------------------------
# Configuration
# -----------------------------
REGISTRY_DIR="/bootstrap/registry"
AUTH_DIR="$REGISTRY_DIR/auth"
DATA_DIR="$REGISTRY_DIR/data"
COMPOSE_FILE="$REGISTRY_DIR/docker-compose.yml"
AUTH_SCRIPT="$REGISTRY_DIR/setup-auth.sh"

TRAEFIK_HOST="registry.faithlink.io"
DEFAULT_USER="docker"
DEFAULT_PASS="docker-pass"

# -----------------------------
# Helper for error handling
# -----------------------------
fatal() {
  echo "‚ùå Error: $*" >&2
  exit 1
}

# -----------------------------
# Step 1: Create directory structure
# -----------------------------
echo "üìÅ Creating directory structure at $REGISTRY_DIR..."
sudo mkdir -p "$AUTH_DIR" "$DATA_DIR" || fatal "Failed to create registry directories"
cd "$REGISTRY_DIR" || fatal "Failed to cd into $REGISTRY_DIR"

# -----------------------------
# Step 2: Create the auth setup script
# -----------------------------
echo "üß© Creating $AUTH_SCRIPT..."
sudo tee "$AUTH_SCRIPT" > /dev/null <<'EOS'
#!/bin/bash
set -euo pipefail

# -----------------------------
# Config
# -----------------------------
AUTH_DIR="./auth"
USERNAME="${1:-docker}"
PASSWORD="${2:-docker-pass}"

# -----------------------------
# Setup auth directory
# -----------------------------
mkdir -p "$AUTH_DIR"

echo "üß© Creating htpasswd file for user '$USERNAME'..."
docker run --rm --entrypoint htpasswd httpd:2 -Bbn "$USERNAME" "$PASSWORD" > "$AUTH_DIR/htpasswd"

echo "‚úÖ Authentication file created at $AUTH_DIR/htpasswd"
EOS

sudo chmod +x "$AUTH_SCRIPT"

# -----------------------------
# Step 3: Create docker-compose.yml
# -----------------------------
echo "üìù Writing $COMPOSE_FILE..."
sudo tee "$COMPOSE_FILE" > /dev/null <<EOF
services:
  registry-server:
    image: registry:2
    container_name: registry-server
    restart: always
    environment:
      REGISTRY_AUTH: htpasswd
      REGISTRY_AUTH_HTPASSWD_PATH: /auth/htpasswd
      REGISTRY_AUTH_HTPASSWD_REALM: Registry Realm
      REGISTRY_HTTP_HEADERS_Access-Control-Allow-Origin: '[https://${TRAEFIK_HOST}]'
      REGISTRY_HTTP_HEADERS_Access-Control-Allow-Methods: '[HEAD,GET,OPTIONS,DELETE]'
      REGISTRY_HTTP_HEADERS_Access-Control-Allow-Credentials: '[true]'
      REGISTRY_HTTP_HEADERS_Access-Control-Allow-Headers: '[Authorization,Accept,Cache-Control]'
      REGISTRY_HTTP_HEADERS_Access-Control-Expose-Headers: '[Docker-Content-Digest]'
      REGISTRY_STORAGE_DELETE_ENABLED: 'true'
    volumes:
      - ./auth:/auth
      - ./data:/var/lib/registry
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.registry.rule=Host(\`${TRAEFIK_HOST}\`)"
      - "traefik.http.routers.registry.entrypoints=websecure"
      - "traefik.http.routers.registry.tls.certresolver=letsencrypt"
      - "traefik.http.services.registry.loadbalancer.server.port=80"
      - "traefik.http.routers.registry-http.rule=Host(\`${TRAEFIK_HOST}\`)"
      - "traefik.http.routers.registry-http.entrypoints=web"
      - "traefik.http.routers.registry-http.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
    networks:
      - traefik-net

networks:
  traefik-net:
    external: true
EOF

# -----------------------------
# Step 4: Generate default auth
# -----------------------------
echo "üîê Creating default authentication for user '$DEFAULT_USER'..."
sudo bash "$AUTH_SCRIPT" "$DEFAULT_USER" "$DEFAULT_PASS"

# -----------------------------
# Step 5: Start registry
# -----------------------------
echo "üöÄ Starting Docker Registry with Traefik integration..."
sudo docker compose -f "$COMPOSE_FILE" down >/dev/null 2>&1 || true
sudo docker compose -f "$COMPOSE_FILE" up -d || fatal "Failed to start registry"

# -----------------------------
# Done
# -----------------------------
echo "‚úÖ Docker Registry setup complete!"
echo
echo "üì¶ Registry Info:"
echo "  URL: https://${TRAEFIK_HOST}"
echo "  Username: $DEFAULT_USER"
echo "  Password: $DEFAULT_PASS"
echo
echo "üìÅ Files located at: $REGISTRY_DIR"
echo "To change credentials later, run: $AUTH_SCRIPT <new_user> <new_pass> && sudo docker compose -f $COMPOSE_FILE restart"
