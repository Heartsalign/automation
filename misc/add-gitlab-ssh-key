#!/bin/bash
set -euo pipefail

# -----------------------------
# Configuration
# -----------------------------
DEFAULT_GITLAB_URL="https://gitlab.com"
SSH_KEY_PATH="${SSH_KEY_PATH:-$HOME/.ssh/id_rsa.pub}"

# -----------------------------
# Functions
# -----------------------------
fatal() {
  echo "‚ùå Error: $*" >&2
  exit 1
}

usage() {
  echo "Usage: $0 -t <gitlab_pat> [-u <gitlab_url>] [-k <ssh_pub_key_path>] [-n <key_name>] [-g]"
  echo
  echo "Options:"
  echo "  -t   GitLab Personal Access Token (required)"
  echo "  -u   GitLab URL (default: $DEFAULT_GITLAB_URL)"
  echo "  -k   Path to SSH public key (default: $SSH_KEY_PATH)"
  echo "  -n   Key name/label (default: hostname + current date)"
  echo "  -g   Generate a new SSH key pair if none exists"
  exit 1
}

# -----------------------------
# Parse Arguments
# -----------------------------
GITLAB_URL="$DEFAULT_GITLAB_URL"
KEY_NAME="SSH Key - $(hostname) - $(date +'%Y-%m-%d %H:%M:%S')"
PAT=""
GENERATE_NEW=false

while getopts "t:u:k:n:g" opt; do
  case $opt in
    t) PAT="$OPTARG" ;;
    u) GITLAB_URL="$OPTARG" ;;
    k) SSH_KEY_PATH="$OPTARG" ;;
    n) KEY_NAME="$OPTARG" ;;
    g) GENERATE_NEW=true ;;
    *) usage ;;
  esac
done

[[ -z "$PAT" ]] && usage

# -----------------------------
# Handle SSH key creation
# -----------------------------
if [[ -f "$SSH_KEY_PATH" ]]; then
  echo "‚úÖ Using existing SSH key: $SSH_KEY_PATH"
else
  if [[ "$GENERATE_NEW" == true ]]; then
    echo "üîë No SSH key found, generating a new one..."
    mkdir -p "$(dirname "$SSH_KEY_PATH")"
    ssh-keygen -t rsa -b 4096 -f "${SSH_KEY_PATH%.pub}" -N "" -C "$(whoami)@$(hostname)"
    echo "‚úÖ SSH key generated: $SSH_KEY_PATH"
  else
    fatal "No SSH key found at $SSH_KEY_PATH. Use -g to generate one."
  fi
fi

SSH_KEY_CONTENT=$(cat "$SSH_KEY_PATH")

# -----------------------------
# Check existing keys on GitLab
# -----------------------------
echo "üîç Checking existing SSH keys on GitLab..."

existing_keys=$(curl -s --header "PRIVATE-TOKEN: $PAT" "$GITLAB_URL/api/v4/user/keys")

if echo "$existing_keys" | grep -q "$SSH_KEY_CONTENT"; then
  echo "‚úÖ This SSH key is already uploaded to GitLab. No action needed."
  exit 0
fi

# -----------------------------
# Upload SSH key to GitLab
# -----------------------------
echo "üöÄ Uploading SSH key to GitLab..."

response=$(curl -s -w "%{http_code}" -o /tmp/gitlab_response.txt \
  --header "PRIVATE-TOKEN: $PAT" \
  --header "Content-Type: application/json" \
  --data "{\"title\": \"$KEY_NAME\", \"key\": \"$SSH_KEY_CONTENT\"}" \
  "$GITLAB_URL/api/v4/user/keys")

if [[ "$response" == "201" ]]; then
  echo "‚úÖ SSH key successfully added to GitLab."
  echo "üìÑ Key name: $KEY_NAME"
  echo "üìÅ Key file: $SSH_KEY_PATH"
else
  echo "‚ùå Failed to add SSH key. HTTP $response"
  echo "Response:"
  cat /tmp/gitlab_response.txt
  echo
  exit 1
fi
